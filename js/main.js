
// based on: http://tutorialzine.com/2013/04/services-chooser-backbone-js/
async.waterfall([
  // 1 = wait for DOM
  function domReady(cb){
    $(document).ready(function(){
      cb();
    });
  },
  // 2 = load templates
  loadTemplates
],
  // 3 = setup application
  function initialize(err, templates){
    if(err){
      console.log('Error: %o', err);
    }

    // Give us functionality similar to Element.setCapture in all browsers.
    // Take the opportunity to centralize the 'dragging' class here too.
    window.startDrag = function(dragHandler) {
        window.dragHandler = dragHandler;
        $('body').addClass('dragging');
    };
    window.dragHandler = null;
    window.addEventListener('mousemove', function(event) {
        if (window.dragHandler) {
            window.dragHandler.mousemove(event);
        }
    });
    window.addEventListener('mouseup', function(event) {
        if (window.dragHandler) {
            window.dragHandler.mouseup(event);
            window.dragHandler = null;
            $('body').removeClass('dragging');
        }
    });

    // 1. Retrieve model - which one to load depends on url args
    var dataset;
    var isFresh = getUrlParameter('fresh');
    if (isFresh) {
      dataset = loadFreshModel();
    } else {
      dataset = loadModel();
    }
    window.dataset = dataset;

    // Set up undo manager.
    var undoManager = new Backbone.UndoManager({
        register: [dataset, dataset.attributes.sessions, dataset.attributes.weeks],
        track: true
        });
    // So that all code can call commit.  There has to be a proper way to do this...
    window.undoManager = undoManager;
    var updateUndoButtons = function() {
        $('#undo').prop('disabled', !undoManager.isAvailable('undo'));
        $('#redo').prop('disabled', !undoManager.isAvailable('redo'));
    };
    updateUndoButtons();
    undoManager.on('availabilityMayHaveChanged', updateUndoButtons);
    $('#undo').click(function() { undoManager.undo(true); });
    $('#redo').click(function() { undoManager.redo(true); });

    // Set up "Simulated current date" control.
    $('#mockToday').datepicker();
    var todayModelToView = function() {
        // Seems to match format generated by datepicker.
        $('#mockToday').val(dataset.attributes.today.format('L'));
    };
    todayModelToView();
    dataset.on('change:today', todayModelToView);
    $('#mockToday').on('change', function() {
        var newToday = moment($('#mockToday').val(), 'L');
        // We might hope Backbone would check this before firing events, but
        // JavaScript has no convention for an overridable equals method...
        if (!newToday.isSame(dataset.attributes.today)) {
            dataset.set('today', newToday);
            // We don't really need to support undo for this control, but it's
            // harmless and easier than not supporting it (i.e., clearing the
            // undo/redo stack).
            undoManager.commit();
        }
    });

    // 2. Setup stuff ...
    setupActivity();

    // 3. Setup application
    var app = new Marionette.Application();
    app.addRegions({
        weekList: '#weeks',
        // activityInfo: ActivityInfo
    });
    app.on('start', function(options){
        console.log('Started Marionette application, options = %o', options);

        if(Backbone.history){
            Backbone.history.start();
        }
    });

    app.weekList.show(new FullView({model: dataset}));

    // 4. Start the application
    app.start();
});
